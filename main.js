/*
*값이란?
식(표현식)이 평가되어서 생성된 결과를 말한다.
예) 0100 0001 을 숫자 타입으로 평가하면 65가 된다.
같은 이 식을 문자로 해석할시 A가 된다.
하지만 문자로 해석한 A가 숫자타입으로 평가한 65는 아니다.

*리터럴이란?
사람이 이해할수 있는 문자 또는 약속된 기호를 사용해서 값을 생성하는 표기법을
의미한다.
예)
정수 리터럴 100
문자 리터럴 "HELLO"

* 표현식이란?
식이라고도 말한다.
예) 3+4
값으로 평가 될수 있는 문, 즉 표현식이 평가되면 결과로 새로운 값이나 기존값을
참조한다.
위의 리터럴은 값으로 평가되기 때문에 리터럴도 표현식의 일종이다.

*문이란? (statement)
프로그램을 구성하는 기본 단위이자 최소 실행단위라고도 한다.
문을 명령문이라고도 부르며, 문은 즉 컴퓨터에게 개발자가 내리는 명령이다.
문이 모여서 프로그램이 되고, 문을 작성하고 순서에 맞게 나열하는 작업을 프로그래밍
이라고 한다.
문은 토큰으로 구성되며, 토큰은 문법적인 의미로써 문을 문법적으로 나누었을때
더이상 나눌수 없는 기본요소를 의미한다.

문의 개수는 ?
var sum = 1 + 1;  -> 총 7개 이다.
세미클론은 기본적으로 문을 마칠때 사용해서 문이 종료됨을 말한다.
{}중괄호로 구역이 만들어지면 ; 을 쓰지않는다.
왜냐하면 코드블록이 완성된것으로 받아들이기 때문에 ;은 문장의 .와 같다.
그러나 생략가능한 편이다.
;을 생략했을때 의미가 성립하는것과 아닌것이 있어서 습관적으로 ;을 붙여야한다.

*데이터 타입
1. 원시형 자료
특정값이 메모리에 바로 저장된다.
값만 저장된것 따라서 '변경이 불가능'한 값이며,
변수에 할당시 실제값이 저장되고 , 변수에 담은 원시값은 값을 복사할시
실제의 값이 복사되어 전달된다.

메모리 공간의 주소가 변경된다는 뜻이다.
즉 재할당시에 이전의 값을 고치거나 변경하는 것이 아니다.
새로운 메모리 공간을 확보하고, 원시값을 저장한다.
그러면 변수는 새롭게 저장된 메모리 공간을 지칭한다.
-> 여기서 변하지 않는 속성을 불변성이라고 한다.

-원시형 자료의 종류
1. 문자열 (string)
문자열의 표현은 반드시 "", '',``으로 감싸서 표현해야합니다.
``(물결표있는부분에 있습니다) 백틱(backtic)
우리나라말로는 억음부호, 이 es6부터 사용가능

문자열 표기 방법중 
--> 템플릿 리터럴 : ``안에서 사용되는 문자열 표기법을 의미

//es5
let sung = 'oh';
let name = 'eun teak';
console.log('My name is ' + sung + ' ' + name + '.');

//es6
console.log(`My name is ${sung} ${name} .`);
반드시 삽입시 ``백틱을 사용한 템플릿 리터럴을 사용해야하고
표현식(변수)를 삽입시에는 ${} 으로 표현식을 감싸서 인식하게합니다ㅓ

2. 숫자 (number)
자바스크립트는 다른언어와 달리 숫자타입이 오직하나입니다

let af = 30;
부동소수점형식 : 사진보세요

3. 불린형, 참거짓형(boolean) = 두가지 값만 존재
참, 거짓(true, false)

4. undefined
변수를 만들고 할당하지 않으면 이값이 저장됨, 즉 에러상황이라고
할 수 있음

5. null 값은 비어있지만 일부러 , 명시적으로 값을 비워둔 경우
-메모리는 만들어야하는데 값은 지금 없어서 넣지 못하고
일부러 비워야 하는경우(에러상황이 아님)

6. 심벌타입 - es6에서 추가된 타입
변경이 불가능한 윈시타입의 값이면, 다른 값과 중복되지 않는
유일무이한 값 - 예) 주민등록번호 뒷자리같은것


참조형 자료 :
값의 참조값, 즉 주소값만 메모리에 저장되는 타입
즉 변수의 메모리 공간에 원시형처럼 값이 직접 들어있는것이 아니라
참조하는 주소의 값만 들어있습니다
원시값과 반대로 변경이 가능한 값입니다


참조형 자료의 종류 -(사실은 모두 객체임)
1. 배열(array)
여러개의 값들을 그룹으로 묶어서 저장한 형태
[3,4,5,6,7,8,9]
각 값들은 순서값(인덱스)으로 탐색할 수 있습니다
이 순서는 0부터시작합니다

2. 객체(object)  여러개의 값들을 그룹으로 묶어서 저장한 형태
let student = {
	name: '홍길동',
	age: 20,
	address: 'boocheon',
};
객체는 성격이 서로다른 값들을 그룹으로 묶고
배열은 성격이 비슷한것을 그룹으로 묶는다
객체는 키와 값으로 이루어져있고, 키와 값을 하나로 묶어서
프로퍼티라고 한다. 즉 객체내에있는
데이터나 함수를 가르키는 것이 프로퍼티이며
하나의 프로퍼티는 이름(key)과 값 쌍으로 이루어져있다
객체의 검색(탐색)은 키로 검색합니다



*/

//[{},{},{},{},{}] 객체 배열
// let colors = ['red', 'yellow', 'brown', 'blue'];
// console.log(colors[0]);
// console.log(colors[8]); //

// let student1 = {
// 	name: '홍길동',
// 	age: 20,
// 	address: 'Seoul',
// 	isMale: true,
// };

// console.log(student1.name);
// console.log(student1.name2);

// //타입변환, 형변환

// let num1 = '2'; //문자열
// let num2 = 3; //숫자

// let result3 = num1 + num2;
// let result4 = num2 + num1;
// console.log(result3);
// console.log(result4);

// let num3 = 5;
// let num4 = 6;
// let result5 = num1 + num2 + num3;
// let result6 = num3 + num2 + num1;
// console.log(result5);
// console.log(result6);

// let result7 = num1 + num2 + num3 + num4;
// console.log(result7);
// //암묵적 형변환 : 자바스크립트가 자동으로(js의 규칙대로)
// // 형변환 시킨것

// //명시적 형변환
// //개발자 특정 명령으로 형변환을 주도하는것

// let numStr = '123';
// let num = Number(numStr);

// console.log(typeof numStr);
// console.log(typeof num);








*/